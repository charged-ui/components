{"version":3,"file":"accordion.js","sourceRoot":"","sources":["../accordion.ts"],"names":[],"mappings":";;AAAA,2BAAyB;AAEzB,MAAM,gBAAiB,SAAQ,WAAW;IACzC;QACC,KAAK,EAAE,CAAC;IACT,CAAC;IAED,+CAA+C;IAC/C,iBAAiB;QAChB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC;IAED,mDAAmD;IACnD,oBAAoB;QACnB,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAC7D,CAAC;IAED,MAAM,KAAI,CAAC;IAEX,QAAQ,KAAI,CAAC;IAEb,mCAAmC;IACnC,YAAY,CAAC,CAAQ;QACpB,iBAAiB;QACjB,MAAM,MAAM,GAAG,CAAC,CAAC,MAA4B,CAAC;QAE9C,yCAAyC;QACzC,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,CAAA;YAAE,OAAO;QAE1B,4BAA4B;QAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;QAEpD,wCAAwC;QACxC,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE,CAAC;YAC1B,IAAI,KAAK,KAAK,MAAM;gBAAE,SAAS;YAC/B,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC;IACF,CAAC;CACD;AAED,cAAc,CAAC,MAAM,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC","sourcesContent":["import './accordion.css';\n\nclass ChargedAccordion extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// Called when the element is added to the DOM.\n\tconnectedCallback() {\n\t\tthis.addEventListener('toggle', this.handleToggle, true);\n\t}\n\n\t// Called when the element is removed from the DOM.\n\tdisconnectedCallback() {\n\t\tthis.removeEventListener('toggle', this.handleToggle, true);\n\t}\n\n\texpand() {}\n\n\tcollapse() {}\n\n\t// Called when a ToggleEvent occurs\n\thandleToggle(e: Event) {\n\t\t// Target element\n\t\tconst target = e.target as HTMLDetailsElement;\n\n\t\t// If accordion is closed, stop execution\n\t\tif (!target?.open) return;\n\n\t\t// Find open accordion items\n\t\tconst open = this.querySelectorAll('details[open]');\n\n\t\t// Close previously open accordion items\n\t\tfor (const child of open) {\n\t\t\tif (child === target) continue;\n\t\t\tchild.removeAttribute('open');\n\t\t}\n\t}\n}\n\ncustomElements.define('ui-accordion', ChargedAccordion);"]}